-- ===================================================
-- 小星星学习记录 H5 应用 - 数据库初始化脚本
-- 🌟 请直接复制以下全部内容到 Supabase SQL Editor 中执行
-- ===================================================

-- 1. 任务库表 (tasks)
CREATE TABLE IF NOT EXISTS tasks (
    id UUID DEFAULT gen_random_uuid() PRIMARY KEY,
    name TEXT NOT NULL UNIQUE,
    default_stars INTEGER NOT NULL DEFAULT 1 CHECK (default_stars > 0 AND default_stars <= 10),
    icon TEXT,
    created_at TIMESTAMPTZ DEFAULT NOW(),
    updated_at TIMESTAMPTZ DEFAULT NOW()
);

-- 2. 每日记录表 (daily_records)
CREATE TABLE IF NOT EXISTS daily_records (
    id UUID DEFAULT gen_random_uuid() PRIMARY KEY,
    date DATE NOT NULL UNIQUE,
    total_stars_earned_today INTEGER NOT NULL DEFAULT 0 CHECK (total_stars_earned_today >= 0),
    notes TEXT,
    created_at TIMESTAMPTZ DEFAULT NOW(),
    updated_at TIMESTAMPTZ DEFAULT NOW()
);

-- 3. 完成任务详情表 (completed_tasks)
CREATE TABLE IF NOT EXISTS completed_tasks (
    id UUID DEFAULT gen_random_uuid() PRIMARY KEY,
    daily_record_id UUID NOT NULL REFERENCES daily_records(id) ON DELETE CASCADE,
    task_name TEXT NOT NULL,
    stars_awarded INTEGER NOT NULL DEFAULT 1 CHECK (stars_awarded > 0 AND stars_awarded <= 10),
    is_custom BOOLEAN NOT NULL DEFAULT FALSE,
    completed_at TIMESTAMPTZ DEFAULT NOW()
);

-- 4. 奖励库表 (rewards)
CREATE TABLE IF NOT EXISTS rewards (
    id UUID DEFAULT gen_random_uuid() PRIMARY KEY,
    name TEXT NOT NULL,
    description TEXT,
    stars_cost INTEGER NOT NULL CHECK (stars_cost > 0),
    icon TEXT,
    image_url TEXT,
    category TEXT DEFAULT 'other',
    is_active BOOLEAN NOT NULL DEFAULT TRUE,
    created_at TIMESTAMPTZ DEFAULT NOW(),
    updated_at TIMESTAMPTZ DEFAULT NOW()
);

-- 5. 儿童状态表 (child_status)
CREATE TABLE IF NOT EXISTS child_status (
    id INTEGER PRIMARY KEY DEFAULT 1,
    total_stars INTEGER NOT NULL DEFAULT 0 CHECK (total_stars >= 0),
    updated_at TIMESTAMPTZ DEFAULT NOW(),
    CONSTRAINT single_row CHECK (id = 1)
);

-- 6. 奖励兑换记录表 (redeemed_rewards)
CREATE TABLE IF NOT EXISTS redeemed_rewards (
    id UUID DEFAULT gen_random_uuid() PRIMARY KEY,
    reward_name TEXT NOT NULL,
    reward_description TEXT,
    stars_cost INTEGER NOT NULL CHECK (stars_cost > 0),
    redeemed_at TIMESTAMPTZ DEFAULT NOW()
);

-- 创建索引
CREATE INDEX IF NOT EXISTS idx_daily_records_date ON daily_records(date);
CREATE INDEX IF NOT EXISTS idx_completed_tasks_daily_record_id ON completed_tasks(daily_record_id);
CREATE INDEX IF NOT EXISTS idx_completed_tasks_completed_at ON completed_tasks(completed_at);
CREATE INDEX IF NOT EXISTS idx_rewards_is_active ON rewards(is_active);
CREATE INDEX IF NOT EXISTS idx_rewards_category ON rewards(category);
CREATE INDEX IF NOT EXISTS idx_rewards_stars_cost ON rewards(stars_cost);
CREATE INDEX IF NOT EXISTS idx_redeemed_rewards_redeemed_at ON redeemed_rewards(redeemed_at);
CREATE INDEX IF NOT EXISTS idx_tasks_name ON tasks(name);

-- 启用 RLS
ALTER TABLE tasks ENABLE ROW LEVEL SECURITY;
ALTER TABLE daily_records ENABLE ROW LEVEL SECURITY;
ALTER TABLE completed_tasks ENABLE ROW LEVEL SECURITY;
ALTER TABLE rewards ENABLE ROW LEVEL SECURITY;
ALTER TABLE child_status ENABLE ROW LEVEL SECURITY;
ALTER TABLE redeemed_rewards ENABLE ROW LEVEL SECURITY;

-- 创建策略
CREATE POLICY "Allow all operations on tasks" ON tasks FOR ALL USING (true);
CREATE POLICY "Allow all operations on daily_records" ON daily_records FOR ALL USING (true);
CREATE POLICY "Allow all operations on completed_tasks" ON completed_tasks FOR ALL USING (true);
CREATE POLICY "Allow all operations on rewards" ON rewards FOR ALL USING (true);
CREATE POLICY "Allow all operations on child_status" ON child_status FOR ALL USING (true);
CREATE POLICY "Allow all operations on redeemed_rewards" ON redeemed_rewards FOR ALL USING (true);

-- 初始化数据
INSERT INTO child_status (id, total_stars, updated_at) VALUES (1, 0, NOW()) ON CONFLICT (id) DO NOTHING;

-- 插入预设任务
INSERT INTO tasks (name, default_stars, icon) VALUES
    ('阅读30分钟', 2, '📚'),
    ('完成作业', 3, '✏️'),
    ('练习钢琴', 2, '🎹'),
    ('整理房间', 1, '🧹'),
    ('帮助家务', 1, '🏠'),
    ('运动锻炼', 2, '⚽'),
    ('早睡早起', 1, '😴'),
    ('刷牙洗脸', 1, '🦷'),
    ('练习画画', 2, '🎨'),
    ('学习数学', 3, '🔢'),
    ('背诵古诗', 2, '📜'),
    ('练习书法', 2, '✒️')
ON CONFLICT (name) DO NOTHING;

-- 插入预设奖励
INSERT INTO rewards (name, description, stars_cost, icon, category) VALUES
    ('看30分钟动画片', '可以看喜欢的动画片30分钟', 5, '📺', 'entertainment'),
    ('吃一次冰淇淋', '选择喜欢的冰淇淋口味', 8, '🍦', 'food'),
    ('晚睡30分钟', '周末可以晚睡30分钟', 10, '🌙', 'privilege'),
    ('选择今天的晚餐', '可以决定今天吃什么', 12, '🍽️', 'privilege'),
    ('买一本新书', '选择一本喜欢的新书', 15, '📖', 'education'),
    ('和朋友玩游戏', '邀请朋友来家里玩2小时', 18, '🎮', 'social'),
    ('买一个小玩具', '选择一个心仪的小玩具', 25, '🧸', 'toy'),
    ('去电影院看电影', '选择喜欢的电影去影院观看', 30, '🎬', 'entertainment'),
    ('去餐厅吃大餐', '去喜欢的餐厅吃一顿大餐', 35, '🍰', 'food'),
    ('买一套新衣服', '选择喜欢的新衣服', 40, '👕', 'clothing'),
    ('去游乐园玩', '周末去游乐园玩一整天', 50, '🎠', 'adventure'),
    ('短途旅行', '全家一起短途旅行', 80, '🚗', 'adventure'),
    ('买心仪的大玩具', '选择一个很想要的大玩具', 100, '🎁', 'toy')
ON CONFLICT DO NOTHING;

-- 创建触发器函数
CREATE OR REPLACE FUNCTION update_total_stars()
RETURNS TRIGGER AS $$
BEGIN
    UPDATE child_status 
    SET total_stars = (
        SELECT COALESCE(SUM(total_stars_earned_today), 0) 
        FROM daily_records
    ) - (
        SELECT COALESCE(SUM(stars_cost), 0) 
        FROM redeemed_rewards
    ),
    updated_at = NOW()
    WHERE id = 1;
    
    RETURN NULL;
END;
$$ LANGUAGE plpgsql;

CREATE OR REPLACE FUNCTION update_updated_at_column()
RETURNS TRIGGER AS $$
BEGIN
    NEW.updated_at = NOW();
    RETURN NEW;
END;
$$ LANGUAGE plpgsql;

-- 创建触发器
DROP TRIGGER IF EXISTS trigger_update_total_stars_on_daily_records ON daily_records;
CREATE TRIGGER trigger_update_total_stars_on_daily_records
    AFTER INSERT OR UPDATE OR DELETE ON daily_records
    FOR EACH ROW EXECUTE FUNCTION update_total_stars();

DROP TRIGGER IF EXISTS trigger_update_total_stars_on_redeem ON redeemed_rewards;
CREATE TRIGGER trigger_update_total_stars_on_redeem
    AFTER INSERT OR DELETE ON redeemed_rewards
    FOR EACH ROW EXECUTE FUNCTION update_total_stars();

DROP TRIGGER IF EXISTS trigger_update_tasks_updated_at ON tasks;
CREATE TRIGGER trigger_update_tasks_updated_at
    BEFORE UPDATE ON tasks
    FOR EACH ROW EXECUTE FUNCTION update_updated_at_column();

DROP TRIGGER IF EXISTS trigger_update_daily_records_updated_at ON daily_records;
CREATE TRIGGER trigger_update_daily_records_updated_at
    BEFORE UPDATE ON daily_records
    FOR EACH ROW EXECUTE FUNCTION update_updated_at_column();

DROP TRIGGER IF EXISTS trigger_update_rewards_updated_at ON rewards;
CREATE TRIGGER trigger_update_rewards_updated_at
    BEFORE UPDATE ON rewards
    FOR EACH ROW EXECUTE FUNCTION update_updated_at_column(); 